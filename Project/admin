from fastapi import FastAPI, APIRouter, Depends
from pydantic import BaseModel
from sqlalchemy import Column, Integer, String, Boolean, DateTime, create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session
from datetime import datetime
from fastapi.testclient import TestClient

# ---------- Database Setup ----------
DATABASE_URL = "sqlite:///./test.db"
engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# ---------- Models ----------
class Notification(Base):
    __tablename__ = "notifications"
    id = Column(Integer, primary_key=True, index=True)
    message = Column(String, nullable=False)
    user_role = Column(String, default="admin")
    created_at = Column(DateTime, default=datetime.utcnow)
    is_read = Column(Boolean, default=False)

# ---------- Schemas ----------
class NotificationCreate(BaseModel):
    message: str
    user_role: str = "admin"

class NotificationOut(NotificationCreate):
    id: int
    created_at: datetime
    is_read: bool

# ---------- DB Dependency ----------
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# ---------- Router ----------
router = APIRouter(prefix="/notifications", tags=["Notifications"])

@router.post("/", response_model=NotificationOut)
def create_notification(n: NotificationCreate, db: Session = Depends(get_db)):
    new = Notification(**n.dict())
    db.add(new)
    db.commit()
    db.refresh(new)
    return new

@router.get("/unread/{role}", response_model=list[NotificationOut])
def get_unread(role: str, db: Session = Depends(get_db)):
    return db.query(Notification).filter_by(user_role=role, is_read=False).all()

@router.post("/mark_read/{notif_id}")
def mark_as_read(notif_id: int, db: Session = Depends(get_db)):
    notif = db.query(Notification).filter_by(id=notif_id).first()
    if notif:
        notif.is_read = True
        db.commit()
        return {"status": "marked as read"}
    return {"error": "Notification not found"}

# ---------- FastAPI App ----------
app = FastAPI()
app.include_router(router)

# ---------- Create Tables ----------
Base.metadata.create_all(bind=engine)

# ---------- Tests ----------
client = TestClient(app)

def test_create_notification():
    res = client.post("/notifications/", json={"message": "Test Alert", "user_role": "admin"})
    assert res.status_code == 200
    assert res.json()["message"] == "Test Alert"

def test_get_unread():
    res = client.get("/notifications/unread/admin")
    assert res.status_code == 200
    assert isinstance(res.json(), list)

def test_mark_as_read():
    unread = client.get("/notifications/unread/admin").json()
    if unread:
        id = unread[0]["id"]
        res = client.post(f"/notifications/mark_read/{id}")
        assert res.status_code == 200
