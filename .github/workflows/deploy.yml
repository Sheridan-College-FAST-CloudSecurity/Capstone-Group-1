name: Deploy FastAPI App to EC2

on:
  push:
    branches: [ "pankti-master" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Verify Terraform Install
        run: terraform --version

      - name: Terraform Init
        run: cd iac && terraform init

      - name: Terraform Apply
        run: cd iac && terraform apply -auto-approve

      # Step 1: Get EC2 IP from Terraform Output and save to a file
      - name: Get EC2 IP from Terraform Output to file
        id: get_ip_to_file
        run: |
          cd iac
          terraform output -raw instance_ip > ../ip.txt
          echo "IP successfully saved to ip.txt"
          echo "Contents of ip.txt (for debugging):" # Debug: Show content of ip.txt
          cat ../ip.txt # This will show if ip.txt itself has duplicate IPs or extra newlines

      # Step 2: Extract EC2 IP and set directly into $GITHUB_ENV
      # This step will now directly write to $GITHUB_ENV.
      # We enable 'set -x' for verbose debugging of shell commands.
      - name: Set EC2 IP in Environment via GITHUB_ENV
        run: |
          set -x # Enable shell debugging
          
          TEMP_IP_FILE="temp_ec2_ip.txt"
          
          # Read the IP from ip.txt, process it, and redirect its output to the temporary file.
          # CRITICAL FIX: Add 'head -n 1' to ensure only the first line is taken.
          # CRITICAL FIX: Use 'tr -d "[:space:]"' to remove ALL whitespace characters (including newlines).
          cat ip.txt | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n 1 | tr -d '[:space:]' > "${TEMP_IP_FILE}"
          
          # Now, read the clean IP from the temporary file into the IP variable.
          IP=$(cat "${TEMP_IP_FILE}")
          
          # Clean up the temporary file immediately.
          rm "${TEMP_IP_FILE}"

          # Check if the IP was successfully extracted
          if [[ -z "$IP" ]]; then
            echo "❌ Error: IP is empty after reading from temporary file. Terraform output might have failed or the file was empty."
            exit 1
          fi
          
          # Log the extracted IP for debugging purposes. This line is safe here.
          echo "🔍 Extracted EC2 IP: $IP" 
          
          # Write the EC2_IP to the GitHub environment file.
          # This line MUST be the only one writing KEY=VALUE to $GITHUB_ENV in this block.
          echo "EC2_IP=$IP" >> $GITHUB_ENV
          
          set +x # Disable shell debugging
        shell: bash

      - name: Setup SSH Key
        run: |
          echo "Current working directory for SSH key setup:"
          pwd
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/pankti-capstone.pem
          chmod 400 ~/.ssh/pankti-capstone.pem
          echo "SSH key setup complete at ~/.ssh/pankti-capstone.pem"
          echo "Verifying SSH key file and permissions:"
          ls -la ~/.ssh/pankti-capstone.pem || echo "SSH key file not found after creation attempt."

      - name: Wait for EC2 Instance to be Ready
        run: |
          echo "Waiting 5 minutes for EC2 instance to fully initialize SSH service..."
          sleep 300

      - name: Test SSH Connection
        run: |
          echo "Attempting SSH connection to: ${{ env.EC2_IP }}"
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/pankti-capstone.pem ubuntu@${{ env.EC2_IP }} "echo SSH connection successful"

      - name: Deploy App to EC2
        run: |
          echo "Copying backend files to EC2..."
          # CRITICAL FIX: Copy the entire 'Project/backend' directory.
          # This assumes 'requirements.txt' is directly inside 'Project/backend/'
          # and 'src' is also inside 'Project/backend/'.
          scp -o StrictHostKeyChecking=no -i ~/.ssh/pankti-capstone.pem -r Project/backend ubuntu@${{ env.EC2_IP }}:/home/ubuntu/
          
          echo "Installing dependencies and launching app..."
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/pankti-capstone.pem ubuntu@${{ env.EC2_IP }} <<'EOF'
            sudo apt update
            sudo apt install -y python3-pip
            
            # CRITICAL FIX: Change directory to where requirements.txt is located after copying.
            # Assuming 'Project/backend' was copied to '/home/ubuntu/backend/'
            cd /home/ubuntu/backend/
            
            # Install dependencies
            sudo pip3 install -r requirements.txt
            
            # CRITICAL FIX: Change directory to where your main.py is located.
            cd /home/ubuntu/backend/src/
            
            # CRITICAL FIX: Use python3 -m uvicorn to ensure uvicorn is found.
            nohup python3 -m uvicorn main:app --host 0.0.0.0 --port 80 &
          EOF

      - name: Done
        run: echo "FastAPI app deployed successfully to ${{ env.EC2_IP }}"
