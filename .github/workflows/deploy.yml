name: Deploy FastAPI App to EC2

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Verify Terraform Install
        run: terraform --version

      - name: Terraform Init
        run: cd iac && terraform init

      - name: Terraform Apply
        run: cd iac && terraform apply -auto-approve

      # Step 1: Get EC2 IP from Terraform Output and save to a file
      - name: Get EC2 IP from Terraform Output to file
        id: get_ip_to_file
        run: |
          cd iac
          terraform output -raw instance_ip > ../ip.txt
          echo "IP successfully saved to ip.txt"
          echo "Contents of ip.txt (for debugging):" # Debug: Show content of ip.txt
          cat ../ip.txt # This will show if ip.txt itself has duplicate IPs or extra newlines

      # Step 2: Extract EC2 IP and set directly into $GITHUB_ENV
      # This step will now directly write to $GITHUB_ENV.
      # We enable 'set -x' for verbose debugging of shell commands.
      - name: Set EC2 IP in Environment via GITHUB_ENV
        run: |
          set -x # Enable shell debugging
          
          TEMP_IP_FILE="temp_ec2_ip.txt"
          
          # Read the IP from ip.txt, process it, and redirect its output to the temporary file.
          # CRITICAL FIX: Add 'head -n 1' to ensure only the first line is taken.
          # CRITICAL FIX: Use 'tr -d "[:space:]"' to remove ALL whitespace characters (including newlines).
          cat ip.txt | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n 1 | tr -d '[:space:]' > "${TEMP_IP_FILE}"
          
          # Now, read the clean IP from the temporary file into the IP variable.
          IP=$(cat "${TEMP_IP_FILE}")
          
          # Clean up the temporary file immediately.
          rm "${TEMP_IP_FILE}"

          # Check if the IP was successfully extracted
          if [[ -z "$IP" ]]; then
            echo "❌ Error: IP is empty after reading from temporary file. Terraform output might have failed or the file was empty."
            exit 1
          fi
          
          # Log the extracted IP for debugging purposes. This line is safe here.
          echo "🔍 Extracted EC2 IP: $IP" 
          
          # Write the EC2_IP to the GitHub environment file.
          # This line MUST be the only one writing KEY=VALUE to $GITHUB_ENV in this block.
          echo "EC2_IP=$IP" >> $GITHUB_ENV
          
          set +x # Disable shell debugging
        shell: bash

      - name: Setup SSH Key
        run: |
          echo "Current working directory for SSH key setup:"
          pwd
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/pankti-capstone.pem
          chmod 400 ~/.ssh/pankti-capstone.pem
          echo "SSH key setup complete at ~/.ssh/pankti-capstone.pem"
          echo "Verifying SSH key file and permissions:"
          ls -la ~/.ssh/pankti-capstone.pem || echo "SSH key file not found after creation attempt."

      - name: Wait for EC2 Instance to be Ready
        run: |
          echo "Waiting 4 minutes for EC2 instance to fully initialize SSH service..."
          sleep 240

      - name: Test SSH Connection
        run: |
          echo "Attempting SSH connection to: ${{ env.EC2_IP }}"
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/pankti-capstone.pem ubuntu@${{ env.EC2_IP }} "echo SSH connection successful"

      - name: Deploy App to EC2
        run: |
          echo "--- Debugging local project structure before SCP ---"
          echo "Current working directory on runner: $(pwd)"
          echo "Listing contents of Project/backend locally before SCP:"
          ls -la Project/backend/
          echo "Listing contents of Project/backend/src locally before SCP:"
          ls -la Project/backend/src/ # CRITICAL: This needs to show main.py here on the runner!
          echo "--- End local debugging ---"

          echo "Copying backend files to EC2..."
          scp -o StrictHostKeyChecking=no -i ~/.ssh/pankti-capstone.pem -r Project/backend ubuntu@${{ env.EC2_IP }}:/home/ubuntu/
          
          echo "Installing dependencies and launching app..."
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/pankti-capstone.pem ubuntu@${{ env.EC2_IP }} <<'EOF'
            set -xe # Enable shell debugging and exit on error immediately

            echo "--- Starting remote deployment script ---"
            
            # Set DEBIAN_FRONTEND to noninteractive for apt commands
            export DEBIAN_FRONTEND=noninteractive
            
            # Update and install necessary tools
            sudo apt update -y
            sudo apt install -y python3-pip net-tools build-essential python3-dev # Added build-essential and python3-dev for potential compilation needs
            
            echo "--- APT commands finished ---"

            # Verify copied directory structure
            echo "Verifying copied files in /home/ubuntu/:"
            ls -la /home/ubuntu/
            echo "Verifying contents of /home/ubuntu/backend/:"
            ls -la /home/ubuntu/backend/
            echo "Verifying contents of /home/ubuntu/backend/src/:"
            ls -la /home/ubuntu/backend/src/ # CRITICAL: This needs to show main.py here on EC2!

            # Navigate to the backend directory where requirements.txt should be
            echo "Changing directory to /home/ubuntu/backend/"
            cd /home/ubuntu/backend/ || { echo "Failed to change directory to /home/ubuntu/backend/"; exit 1; }
            
            # Verify requirements.txt existence
            if [ -f requirements.txt ]; then
              echo "✅ requirements.txt found."
            else
              echo "❌ requirements.txt NOT found in $(pwd)."
              exit 1
            fi

            # Install Python dependencies
            echo "Installing Python dependencies from requirements.txt..."
            # Use `python3 -m pip` for better practice with multiple Python versions
            sudo python3 -m pip install -r requirements.txt || { echo "Failed to install Python dependencies."; exit 1; }
            echo "Python dependencies installed."

            # Verify uvicorn installation (optional, but good for debugging)
            echo "Verifying uvicorn installation:"
            which uvicorn || echo "uvicorn not found in PATH."
            python3 -m uvicorn --version || echo "uvicorn module not found."

            # Navigate to the source directory where main.py is
            echo "Changing directory to /home/ubuntu/backend/"
            cd /home/ubuntu/backend/ || { echo "Failed to change directory to /home/ubuntu/backend/"; exit 1; }
            
            # This check is now correct because main.py is in the current directory
            if [ -f main.py ]; then
              echo "✅ main.py found."
            else
              echo "❌ main.py NOT found in $(pwd)."
              exit 1
            fi

            # Start FastAPI app using nohup
            echo "Starting FastAPI app with uvicorn..."
            # Make sure to use `python3` that pip installs packages for.
            # If using a venv, you'd just use `uvicorn main:app` directly.
            # For now, sticking with `python3 -m uvicorn` as it's more robust.
            sudo nohup python3 -m uvicorn main:app --host 0.0.0.0 --port 80 > /home/ubuntu/fastapi_app.log 2>&1 &
            echo "FastAPI app started. Check /home/ubuntu/fastapi_app.log for output."
            
            # Give it a moment to start and check if it's listening
            sleep 5
            echo "Checking if FastAPI app is listening on port 80:"
            sudo ss -tulnp | grep 80 || echo "Port 80 not listening. Check fastapi_app.log for errors."

            echo "--- Remote deployment script finished ---"
            set +x # Disable shell debugging on the remote server
          EOF

      - name: Done
        run: echo "FastAPI app deployed successfully to ${{ env.EC2_IP }}"
