name: Deploy FastAPI App to EC2

on:
  push:
    branches: [ "pankti-master" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      # These are job-level environment variables, they are fine here.
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Verify Terraform Install
        run: terraform --version

      - name: Terraform Init
        run: cd iac && terraform init

      - name: Terraform Apply
        run: cd iac && terraform apply -auto-approve

      # Step 1: Get EC2 IP from Terraform Output and save to a file
      # This step is correct and ensures the IP is written to ip.txt without stdout pollution.
      - name: Get EC2 IP from Terraform Output to file
        id: get_ip_to_file # Give this step an ID to reference its outputs
        run: |
          cd iac
          terraform output -raw instance_ip > ../ip.txt
          echo "IP successfully saved to ip.txt" # Added a confirmation log for clarity

      # Step 2: Extract EC2 IP and set as a STEP OUTPUT
      # We are no longer writing to $GITHUB_ENV directly here to avoid the issue.
      - name: Extract EC2 IP and set as Step Output
        id: set_ec2_ip_output # Give this step an ID to reference its outputs
        run: |
          # Read the IP from the ip.txt file created in the previous step.
          # Then, apply grep and tr to ensure it's clean.
          IP=$(cat ip.txt | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | tr -d '\r')
          
          # Check if the IP was successfully extracted
          if [[ -z "$IP" ]]; then
            echo "‚ùå Error: IP is empty after reading from ip.txt. Terraform output might have failed or the file was empty."
            exit 1
          fi
          
          # Log the extracted IP for debugging purposes. This line is safe here.
          echo "üîç Extracted EC2 IP: $IP" 
          
          # Set the IP as an output for this step.
          # The format is ::set-output name=<output_name>::<value>
          # This command is processed by GitHub Actions and does not interfere with $GITHUB_ENV.
          echo "::set-output name=ec2_ip::${IP}"
        shell: bash

      # Add a delay before attempting SSH connection
      - name: Wait for EC2 Instance to be Ready
        run: |
          echo "Waiting 5 minutes for EC2 instance to fully initialize SSH service..."
          sleep 300 # You can adjust this duration if needed

      - name: Test SSH Connection
        run: |
          echo "Attempting SSH connection to: ${{ env.EC2_IP }}"
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/pankti-capstone.pem ubuntu@${{ env.EC2_IP }} "echo SSH connection successful"

      - name: Deploy App to EC2
        run: |
          echo "Copying backend files to EC2..."
          scp -o StrictHostKeyChecking=no -i ~/.ssh/pankti-capstone.pem -r Project/backend/src/* ubuntu@${{ env.EC2_IP }}:/home/ubuntu/

          echo "Installing dependencies and launching app..."
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/pankti-capstone.pem ubuntu@${{ env.EC2_IP }} <<'EOF'
            sudo apt update
            sudo apt install -y python3-pip
            sudo pip3 install -r /home/ubuntu/requirements.txt
            cd /home/ubuntu/
            nohup uvicorn backend.src.main:app --host 0.0.0.0 --port 80 &
          EOF

      - name: Done
        run: echo "FastAPI app deployed successfully to ${{ env.EC2_IP }}"